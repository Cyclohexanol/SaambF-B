datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  email     String    @unique
  name      String?
  password  String
  groupId   Int?
}

model Guest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  email     String    @unique
  name      String?
  password  String
  meals     Meal[]
  comments  Comment[]
  coffeeRatings CoffeeRating[]
}

model Meal {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  description String
  date       DateTime
  comments   Comment[]
  guests     Guest[]
  dishes     Dish[]
}

model Dish {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  url       String
  description String
  comments   Comment[]
  meals      Meal[]
  dishComponents DishComponent[]
}

model DishComponent {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  description String
  recipes    String?
  dishes     Dish[]
}

model Coffee {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  description String
  coffeeRatings   CoffeeRating[]
}

model CoffeeMachine {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  description String
  coffeeRatings   CoffeeRating[]
}

model CoffeeRating {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  rating    Int
  coffeeType CoffeeType? @relation(fields: [coffeeTypeId], references: [id])
  coffeeTypeId Int?
  machine  CoffeeMachine? @relation(fields: [machineId], onDelete: SetNull, references: [id])
  machineId Int?
  coffee    Coffee    @relation(fields: [coffeeId], onDelete: SetNull, references: [id])
  coffeeId  Int
  guest     Guest?   @relation(fields: [guestId], onDelete: SetNull, references: [id])
  guestId   Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int?
  meal      Meal?    @relation(fields: [mealId], onDelete: SetNull, references: [id])
  mealId    Int?
  guest     Guest?   @relation(fields: [guestId], onDelete: SetNull, references: [id])
  guestId   Int?
  dish      Dish?    @relation(fields: [dishId], onDelete: SetNull, references: [id])
  dishId    Int?
}

model CoffeeType {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  description String
  coffeeRatings   CoffeeRating[]
}
